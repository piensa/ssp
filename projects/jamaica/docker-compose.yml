version: '3'

services:
  libpostal:
    image: pelias/libpostal-service
    container_name: pelias_libpostal
    user: "${DOCKER_USER}"
    restart: always
    ports: [ "4400:4400" ]
    networks:
      - intranet
  schema:
    image: pelias/schema:master
    container_name: pelias_schema
    user: "${DOCKER_USER}"
    networks:
      - intranet
    volumes:
      - "./ssp.json:/code/pelias.json"
  api:
    image: pelias/api:master
    container_name: pelias_api
    user: "${DOCKER_USER}"
    restart: always
    environment: [ "PORT=4000" ]
    ports: [ "4000:4000" ]
    networks:
      - intranet
    volumes:
      - "./ssp.json:/code/pelias.json"
  placeholder:
    image: pelias/placeholder:master
    container_name: pelias_placeholder
    user: "${DOCKER_USER}"
    restart: always
    environment: [ "PORT=4100" ]
    ports: [ "4100:4100" ]
    networks:
      - intranet
    volumes:
      - "./ssp.json:/code/pelias.json"
      - "${DATA_DIR}:/data"
      - "./blacklist/:/data/blacklist"
  whosonfirst:
    image: pelias/whosonfirst:master
    container_name: pelias_whosonfirst
    networks:
      - intranet
    user: "${DOCKER_USER}"
    volumes:
      - "./ssp.json:/code/pelias.json"
      - "${DATA_DIR}:/data"
      - "./blacklist/:/data/blacklist"
  openstreetmap:
    image: pelias/openstreetmap:master
    container_name: pelias_openstreetmap
    networks:
      - intranet
    user: "${DOCKER_USER}"
    volumes:
      - "./ssp.json:/code/pelias.json"
      - "${DATA_DIR}:/data"
      - "./blacklist/:/data/blacklist"
  openaddresses:
    image: pelias/openaddresses:master
    container_name: pelias_openaddresses
    user: "${DOCKER_USER}"
    networks:
      - intranet
    volumes:
      - "./ssp.json:/code/pelias.json"
      - "${DATA_DIR}:/data"
      - "./blacklist/:/data/blacklist"
  transit:
    image: pelias/transit:master
    container_name: pelias_transit
    user: "${DOCKER_USER}"
    networks:
      - intranet
    volumes:
      - "./ssp.json:/code/pelias.json"
      - "${DATA_DIR}:/data"
  csv-importer:
    image: pelias/csv-importer:master
    container_name: pelias_csv_importer
    user: "${DOCKER_USER}"
    networks:
      - intranet
    volumes:
      - "./ssp.json:/code/pelias.json"
      - "${DATA_DIR}:/data"
      - "./blacklist/:/data/blacklist"
  polylines:
    image: pelias/polylines:master
    container_name: pelias_polylines
    user: "${DOCKER_USER}"
    networks:
      - intranet
    volumes:
      - "./ssp.json:/code/pelias.json"
      - "${DATA_DIR}:/data"
  interpolation:
    image: pelias/interpolation:master
    container_name: pelias_interpolation
    user: "${DOCKER_USER}"
    restart: always
    environment: [ "PORT=4300" ]
    ports: [ "4300:4300" ]
    networks:
      - intranet
    volumes:
      - "./ssp.json:/code/pelias.json"
      - "${DATA_DIR}:/data"
  pip:
    image: pelias/pip-service:master
    container_name: pelias_pip-service
    user: "${DOCKER_USER}"
    restart: always
    environment: [ "PORT=4200" ]
    ports: [ "4200:4200" ]
    networks:
      - intranet
    volumes:
      - "./ssp.json:/code/pelias.json"
      - "${DATA_DIR}:/data"
  elasticsearch:
    image: pelias/elasticsearch:5.6.12
    container_name: pelias_elasticsearch
    restart: always
    ports: [ "9200:9200", "9300:9300" ]
    networks:
      - intranet
    volumes:
      - "${DATA_DIR}/elasticsearch:/usr/share/elasticsearch/data"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add: [ "IPC_LOCK" ]
  fuzzy-tester:
    image: pelias/fuzzy-tester:master
    container_name: pelias_fuzzy_tester
    user: "${DOCKER_USER}"
    restart: "no"
    command: "--help"
    networks:
      - intranet
    volumes:
      - "./ssp.json:/code/pelias.json"
      - "./test_cases:/code/pelias/fuzzy-tester/test_cases"
  hydra-migrate:
    image: oryd/hydra:v1.0.0-rc.6_oryOS.10
    links:
      - postgresd:postgresd
    networks:
      - intranet
    environment:
      - LOG_LEVEL=debug
      - SYSTEM_SECRET=youreallyneedtochangethis
    command:
      migrate sql postgres://${DB_USER}:${DB_PW}@postgresd:${DB_PORT}/${DB_NAME}?sslmode=disable
    restart: on-failure
  keto-migrate:
    image: oryd/keto:v0.2.2-sandbox_oryOS.10
    links:
      - postgresd
    environment:
      - LOG_LEVEL=debug
    networks:
      - intranet
    command:
      migrate sql postgres://${DB_USER}:${DB_PW}@postgresd:${DB_PORT}/${DB_NAME}?sslmode=disable
    restart: on-failure
  oathkeeper-migrate:
    image: oryd/oathkeeper:v0.14.2_oryOS.10
    links:
      - postgresd:postgresd
    environment:
      - LOG_LEVEL=debug
    networks:
      - intranet
    command:
      migrate sql postgres://${DB_USER}:${DB_PW}@postgresd:${DB_PORT}/${DB_NAME}?sslmode=disable
    restart: on-failure
  hydra_admin:
    image: oryd/hydra:v1.0.0-rc.6_oryOS.10
    container_name: hydra_admin
    networks:
      - intranet
      - web
    command: serve admin --dangerous-force-http
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_PW}@postgresd:${DB_PORT}/${DB_NAME}?sslmode=disable
      - SYSTEM_SECRET=youreallyneedtochangethis
    labels:
      - "traefik.enable=true"
      - "traefik.backend=hydra_admin"
      - "traefik.frontend.rule=Host:admin.${DOMAIN_NAME}"
      - "traefik.port=4445"
      - "traefik.docker.network=web"
    restart: on-failure
    volumes:
      - "./:/config/"
  hydra_public:
    image: oryd/hydra:v1.0.0-rc.6_oryOS.10
    container_name: hydra_public
    networks:
      - intranet
      - web
    command: serve public --dangerous-force-http
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_PW}@postgresd:${DB_PORT}/${DB_NAME}?sslmode=disable
      - OAUTH2_CONSENT_URL=http://logico.${DOMAIN_NAME}/consent
      - OAUTH2_LOGIN_URL=http://logico.${DOMAIN_NAME}/login
      - SYSTEM_SECRET=youreallyneedtochangethis
      - OAUTH2_ISSUER_URL=http://api.${DOMAIN_NAME}
    labels:
      - "traefik.enable=true"
      - "traefik.backend=hydra_api"
      - "traefik.frontend.rule=Host:api.${DOMAIN_NAME}"
      - "traefik.port=4444"
      - "traefik.docker.network=web"
    restart: on-failure
    volumes:
      - "./config/:/config/"
  keto:
    container_name: keto
    image: oryd/keto:v0.2.2-sandbox_oryOS.10
    depends_on:
      - hydra_admin
      - hydra_public
      - keto-migrate
    links:
      - hydra_admin
      - hydra_public
      - postgresd
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_PW}@postgresd:${DB_PORT}/${DB_NAME}?sslmode=disable
      - AUTHENTICATOR_OAUTH2_CLIENT_CREDENTIALS_TOKEN_URL=http://hydra_public:4444/oauth2/token
      - AUTHENTICATOR_OAUTH2_INTROSPECTION_URL=http://hydra_admin:4445/oauth2/introspect
    networks:
      - intranet
    restart: on-failure
    volumes:
      - "./:/config/"
  ok-api:
    container_name: ok-api
    image: oryd/oathkeeper:v0.14.2_oryOS.10
    links:
      - hydra_admin
      - keto:keto
      - postgresd:postgresd
      - api
    networks:
      - intranet
      - web
    restart: on-failure
    environment:
      - CORS_ENABLED=true
      - LOG_LEVEL=debug
      - ISSUER_URL=http://ok-proxy:4455/
      - DATABASE_URL=postgres://${DB_USER}:${DB_PW}@postgresd:${DB_PORT}/${DB_NAME}?sslmode=disable
      - PORT=4456
      - CREDENTIALS_ISSUER_ID_TOKEN_HS256_SECRET=changemechangemechangemechangemedo
      - AUTHORIZER_KETO_URL=http://keto:4466
      - AUTHENTICATOR_OAUTH2_INTROSPECTION_URL=http://hydra_admin:4445/oauth2/introspect
      - CORS_ALLOWED_ORIGINS=*
    command: serve api
    volumes:
      - "./:/config/"
    labels:
      - "traefik.enable=true"
      - "traefik.backend=okapi"
      - "traefik.frontend.rule=Host:okapi.${DOMAIN_NAME}"
      - "traefik.port=4456"
      - "traefik.docker.network=web"
  ok-proxy:
    container_name: ok-proxy
    image: oryd/oathkeeper:v0.14.2_oryOS.10
    links:
      - hydra_admin
      - keto
      - ok-api
      - api
    restart: on-failure
    depends_on:
      - ok-api
    networks:
      - intranet
      - web
    volumes:
      - "./:/config/"
    environment:
      - CORS_ENABLED=true
      - LOG_LEVEL=debug
      - OATHKEEPER_API_URL=http://ok-api:4456
      - PORT=4455
      - CREDENTIALS_ISSUER_ID_TOKEN_HS256_SECRET=changemechangemechangemechangeme
      - AUTHORIZER_KETO_URL=http://keto:4466
      - AUTHENTICATOR_OAUTH2_INTROSPECTION_URL=http://hydra_admin:4445/oauth2/introspect
      - CORS_ALLOWED_ORIGINS=*
    command: serve proxy
    labels:
      - "traefik.enable=true"
      - "traefik.backend=okproxy"
      - "traefik.frontend.rule=Host:okproxy.${DOMAIN_NAME}"
      - "traefik.port=4455"
      - "traefik.docker.network=web"
  logico:
    container_name: logico
    image: ninjalikeme/logico
    command: /app/main
    networks:
      - intranet
      - web
    environment:
      - DB_USER=$DB_USER
      - DB_PW=$DB_PW
      - DB_NAME=$USER_DB
      - DB_HOST=postgresd
      - DB_PORT=5432
      - HYDRA_PUBLIC_URL=https://api.puerti.co
      - HYDRA_ADMIN_URL=https://admin.puerti.co
      - PROXY_URL=https://okproxy.puerti.co/search
      - HYDRA_CLIENT_ID=jcf-client
      - HYDRA_CLIENT_SECRET=jcf-secret
      - HYDRA_SCOPES=openid,offline,api
      - CALLBACK_URL=https://okproxy.puerti.co/callback
      - PORT=3000
    links:
      - hydra_admin
      - hydra_public
      - postgresd
      - ok-proxy 
    labels:
      - "traefik.enable=true"
      - "traefik.backend=logico"
      - "traefik.frontend.rule=Host:logico.${DOMAIN_NAME}"
      - "traefik.port=3000"
      - "traefik.docker.network=web"
  postgresd:
    image: postgres:9.6
    container_name: postgres
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PW}
      - POSTGRES_DB=${DB_NAME}
      - USER_DB=${USER_DB} 
    networks:
      - intranet
    volumes:
      - "./postgres:/dump"
  json_parser:
    image: stedolan/jq
    container_name: json_parser
    volumes:
      - "./:/config/"

networks:
  web:
    external: true
  intranet:
    driver: bridge
